// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  USER
}

enum TaskStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
}

enum TaskPriority {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

model User {
  id            String    @id @default(uuid())
  email         String    @unique
  password      String
  firstName     String
  lastName      String
  role          Role      @default(USER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // Relations
  tasks         Task[]
  comments      Comment[]
  categories    Category[]
}

model Task {
  id            String       @id @default(uuid())
  title         String
  description   String?
  status        TaskStatus   @default(PENDING)
  priority      TaskPriority @default(MEDIUM)
  dueDate       DateTime?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  
  // Relations
  createdBy     User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String
  category      Category?    @relation(fields: [categoryId], references: [id])
  categoryId    String?
  comments      Comment[]
}

model Category {
  id            String     @id @default(uuid())
  name          String     
  description   String?
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  
  // Relations
  user          User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String
  tasks         Task[]

  // Unique constraint to ensure a user can't create duplicate category names
  @@unique([name, userId])
}

model Comment {
  id            String     @id @default(uuid())
  content       String
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  
  // Relations
  task          Task       @relation(fields: [taskId], references: [id], onDelete: Cascade)
  taskId        String
  user          User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String
}